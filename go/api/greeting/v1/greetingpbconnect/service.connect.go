// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/greeting/v1/service.proto

package greetingpbconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/minauteur/go_meetup_api/go/api/greeting/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GreetingAPIName is the fully-qualified name of the GreetingAPI service.
	GreetingAPIName = "api.greeting.v1.GreetingAPI"
)

// GreetingAPIClient is a client for the api.greeting.v1.GreetingAPI service.
type GreetingAPIClient interface {
	Greet(context.Context, *connect_go.Request[v1.GreetingMessage]) (*connect_go.Response[v1.GreetingResponse], error)
}

// NewGreetingAPIClient constructs a client for the api.greeting.v1.GreetingAPI service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGreetingAPIClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GreetingAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &greetingAPIClient{
		greet: connect_go.NewClient[v1.GreetingMessage, v1.GreetingResponse](
			httpClient,
			baseURL+"/api.greeting.v1.GreetingAPI/Greet",
			opts...,
		),
	}
}

// greetingAPIClient implements GreetingAPIClient.
type greetingAPIClient struct {
	greet *connect_go.Client[v1.GreetingMessage, v1.GreetingResponse]
}

// Greet calls api.greeting.v1.GreetingAPI.Greet.
func (c *greetingAPIClient) Greet(ctx context.Context, req *connect_go.Request[v1.GreetingMessage]) (*connect_go.Response[v1.GreetingResponse], error) {
	return c.greet.CallUnary(ctx, req)
}

// GreetingAPIHandler is an implementation of the api.greeting.v1.GreetingAPI service.
type GreetingAPIHandler interface {
	Greet(context.Context, *connect_go.Request[v1.GreetingMessage]) (*connect_go.Response[v1.GreetingResponse], error)
}

// NewGreetingAPIHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGreetingAPIHandler(svc GreetingAPIHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/api.greeting.v1.GreetingAPI/Greet", connect_go.NewUnaryHandler(
		"/api.greeting.v1.GreetingAPI/Greet",
		svc.Greet,
		opts...,
	))
	return "/api.greeting.v1.GreetingAPI/", mux
}

// UnimplementedGreetingAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedGreetingAPIHandler struct{}

func (UnimplementedGreetingAPIHandler) Greet(context.Context, *connect_go.Request[v1.GreetingMessage]) (*connect_go.Response[v1.GreetingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.greeting.v1.GreetingAPI.Greet is not implemented"))
}
